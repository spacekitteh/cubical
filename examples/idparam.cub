module idparam where

thm : (f : (A : U) -> A -> A) (A : U) (P : A -> U) (a : A) -> P a -> P (f A a)
thm f A P a q = (f ((x : A) *_i P x) (a ,_i q)) ._i

N : U
data N = zero | suc (n : N)

nat : U
nat = (A : U) -> A -> (A -> A) -> A

zer : nat
zer A z _ = z

one : nat
one A z s = s z

pred : N -> U
pred = split
  zero  -> N
  suc n -> pred n

predZero : pred zero
predZero = zero

predSuc : (x : N) -> pred x -> pred (suc x)
predSuc x p = p

thm2 : (A : U) (P : A -> U) (z : A) (s : A -> A) (pz : P z) (ps : (a : A) -> P a -> P (s a))
       (n : nat) -> P (n A z s)
thm2 A P z s pz ps n = (n ((x : A) *_i P x) (z ,_i pz) (s ,_i \x y -> ps x y)) ._i


test : N
test = thm2 N pred zero (\x -> suc x) predZero predSuc one


thm3 : (F : (A : U) -> ((A -> A) -> A) -> A)
       (A : U)
       (P : A -> U)
       (y : (A -> A) -> A) ->
       ((f : A -> A) ->
          ((a : A) -> P a -> P (f a)) ->
	  P (y f))
	  ->
       P (F A y)
thm3 F A P y q = (F ((x : A) *_i P x) (y ,_i \g h -> q g (\a p -> h a p))) ._i

F : U
F = (X : U) (P : X -> U) (a : X) -> P a -> P a

paramF : (f : F)
         (X : U) (X' : X -> U)
         (P : X -> U) (P' : (b : X) -> X' b -> P b -> U)
         (a : X) (a' : X' a)
         (p : P a) ->
	 P' a a' p -> P' a a' (f X P a p)
paramF f X X' P P' a a' p p' =
  (f ((x : X) *_i X' x) (P ,_i \x y z -> P' x y z) (a,_i a') (p,_i p')) ._i
